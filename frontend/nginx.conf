server {
    listen 80;

    # The root directory for serving static files
    root /usr/share/nginx/html;
    index index.html index.htm;

    # File upload size limits
    client_max_body_size 100M;
    client_body_timeout 300s;
    client_header_timeout 300s;
    send_timeout 300s;

    # Use Docker's internal DNS resolver to find the backend service
    resolver 127.0.0.11 valid=30s;
    set $backend_upstream http://backend:8000;

    location /api/ {
        proxy_pass $backend_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Proxy timeouts for large file uploads
        proxy_read_timeout 600s;
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
        
        # Disable buffering for large file uploads
        proxy_request_buffering off;
        proxy_buffering off;
        
        # Override client_max_body_size for API requests
        client_max_body_size 100M;
    }

    # Specific configuration for file upload endpoints
    location /api/files/upload/ {
        proxy_pass $backend_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Extended timeouts for large file uploads
        proxy_read_timeout 1200s;
        proxy_connect_timeout 1200s;
        proxy_send_timeout 1200s;
        
        # Disable buffering for large file uploads
        proxy_request_buffering off;
        proxy_buffering off;
        
        # Allow larger files for bulk uploads
        client_max_body_size 500M;
    }

    location /media/ {
        # Nginx will serve files from the `root` directory + location.
        # This corresponds to the `media_data` volume mounted in docker-compose.yml.
    }

    location / {
        # Try to serve the requested file directly, then as a directory,
        # and if neither exists, fall back to serving index.html.
        # This is the key to making client-side routing work.
        try_files $uri $uri/ /index.html;
    }

    # Optional: Add headers to prevent caching issues
    location ~* \.(?:html|json)$ {
        expires -1;
    }

    location ~* \.(?:css|js)$ {
        expires 1y;
        add_header Cache-Control "public";
    }
}